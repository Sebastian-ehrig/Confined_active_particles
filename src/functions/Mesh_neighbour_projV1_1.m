function F_neighbourg = Mesh_neighbour_projV1_1(name_structure,dist_motion)

UpFolder = fileparts(pwd);


% Import an STL mesh, returning a PATCH-compatible face-vertex structure
%name_structure = 'ellipsoid';
% [Faces,Vertex,N] = stlread('sphere.stl');
[Faces,Vertex,N] = stlread(fullfile(UpFolder,'meshes',[name_structure,'.stl']));

%%%%%%%%%%%%%%%%%
% Create index matrix of neighbourg faces to each face
%%%%%%%%%%%%%%%%%%
mesh_struct = fullfile(UpFolder,'meshes',[name_structure,'_proj.mat']);

F_neighbourg = nan(length(Faces(:,1)),100);
Faces_coord = cat(3,[Vertex(Faces(:,1),1),Vertex(Faces(:,2),1),...
    Vertex(Faces(:,3),1)],[Vertex(Faces(:,1),2),Vertex(Faces(:,2),2),...
    Vertex(Faces(:,3),2)],[Vertex(Faces(:,1),3),Vertex(Faces(:,2),3),...
    Vertex(Faces(:,3),3)]);

demo_neighbour = 0; % 1 to show neighbourgh of each face
max_neighbour = 0;
% Loop for to search all neighbours for each faces within a radius 
% "radius_search" centered around the isobarycenter of the face. 
% The face are considered within the radius if at least one of the
% vertex is within. radius_search = displacement of particle + distance
% between isobarcenter and verteces of face considered
for i = 1:length(Faces(:,1))
    % Coord vector all faces verteces to vertex 1 of this face
    center_faces = [...
        Faces_coord(i,1,1)+Faces_coord(i,2,1)+Faces_coord(i,3,1),...
        Faces_coord(i,1,2)+Faces_coord(i,2,2)+Faces_coord(i,3,2),...
        Faces_coord(i,1,3)+Faces_coord(i,2,3)+Faces_coord(i,3,3)...
        ]/3.;
    extra_dist = sqrt((center_faces(1)-Faces_coord(i,1,1))^2+...
        (center_faces(2)-Faces_coord(i,1,2))^2+...
        (center_faces(3)-Faces_coord(i,1,3))^2);
    radius_search = extra_dist+dist_motion;
    Faces2center = Faces_coord-cat(3,center_faces(1)*ones(size(Faces)),...
        center_faces(2)*ones(size(Faces)),center_faces(3)*...
        ones(size(Faces)));
    % Norm^2 vector all faces verteces to vertex 1 of this face
    Faces2center = Faces2center(:,:,1).*Faces2center(:,:,1)+...
        Faces2center(:,:,2).*Faces2center(:,:,2)+Faces2center(:,:,3).*...
        Faces2center(:,:,3);
    % Assign the value zero if vertex too far form center
    Faces2center(Faces2center>radius_search^2) = 0;
    % Sum the distance of vertices for each faces
    Faces2center = Faces2center(:,1)+Faces2center(:,2)+Faces2center(:,3);
    % Create coefficient matrix for neighbourg of center of considered face.
    % Only faces with non zero distances are valid.
    index_row = find(Faces2center>0);
    if demo_neighbour == 1   
        figure()
        plot3([Faces_coord(i,1,1),Faces_coord(i,2,1),Faces_coord(i,3,1),...
            Faces_coord(i,1,1)],[Faces_coord(i,1,2),Faces_coord(i,2,2),Faces_coord(i,3,2),...
            Faces_coord(i,1,2)],[Faces_coord(i,1,3),Faces_coord(i,2,3),Faces_coord(i,3,3),...
            Faces_coord(i,1,3)],'r')
        hold on
        for index1 = 1:length(index_row)
            index = real(index_row(index1));
            plot3([Faces_coord(index,1,1),Faces_coord(index,2,1),Faces_coord(index,3,1),...
                Faces_coord(index,1,1)],[Faces_coord(index,1,2),Faces_coord(index,2,2),Faces_coord(index,3,2),...
                Faces_coord(index,1,2)],[Faces_coord(index,1,3),Faces_coord(index,2,3),Faces_coord(index,3,3),...
                Faces_coord(index,1,3)],'b')
        end
        plot3([Faces_coord(i,1,1),Faces_coord(i,2,1),Faces_coord(i,3,1),...
            Faces_coord(i,1,1)],[Faces_coord(i,1,2),Faces_coord(i,2,2),Faces_coord(i,3,2),...
            Faces_coord(i,1,2)],[Faces_coord(i,1,3),Faces_coord(i,2,3),Faces_coord(i,3,3),...
            Faces_coord(i,1,3)],'r')
        plot3((Faces_coord(i,1,1)+Faces_coord(i,2,1)+Faces_coord(i,3,1))/3,...
            (Faces_coord(i,1,2)+Faces_coord(i,2,2)+Faces_coord(i,3,2))/3,...
            (Faces_coord(i,1,3)+Faces_coord(i,2,3)+Faces_coord(i,3,3))/3,...
            '*r')
        plot3([(Faces_coord(i,1,1)+Faces_coord(i,2,1)+Faces_coord(i,3,1))/3,...
            (Faces_coord(i,1,1)+Faces_coord(i,2,1)+Faces_coord(i,3,1))/3+radius_search],...
            [(Faces_coord(i,1,2)+Faces_coord(i,2,2)+Faces_coord(i,3,2))/3,...
            (Faces_coord(i,1,2)+Faces_coord(i,2,2)+Faces_coord(i,3,2))/3],...
            [(Faces_coord(i,1,3)+Faces_coord(i,2,3)+Faces_coord(i,3,3))/3,...
            (Faces_coord(i,1,3)+Faces_coord(i,2,3)+Faces_coord(i,3,3))/3],...
            'g')

        hold off
        %F_neighbourg(i,1:max_neighbour)
        pause
        close all
    end
    F_neighbourg(i,1:length(index_row)) = index_row';
    F_neighbourg(i,1+length(index_row)) = i;
    max_neighbour = max([length(index_row)+1,max_neighbour]);
end
F_neighbourg(F_neighbourg == 0) = nan;
F_neighbourg(:,max_neighbour+1:end) = [];
F = struct('mesh',F_neighbourg);
save(mesh_struct,'F')
